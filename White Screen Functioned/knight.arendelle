< long >

/*
 * SPECIAL VERSION FOR WHITE TERMINAL
 * SCREENS WITH RESPONSITIVE SPACINGS
 * AND BORDERED BOARD AND BACKGROUND
 * COLOR PATH MARKS.
 */

// COPYRIGHT 2014 POUYA KARY
// KARY KNIGHT MOVE OPTIMIZER VERSION 1
// FOR CALCULATING THE MINIMUM  MOVE
// REQUIERD BY ONE CHESS KNIGHT TO MOVE
// FROM BUTTOM LEFT OF A BOARD IN SIZE
// OF N TO THE TOP RIGHT.


   ////////////////////////////////
   /// BUILDING THE CHESS BOARD ///
   ////////////////////////////////


// first spcaings
   ( xspacings , ( #i - @long*2 ) / 2 )
   ( yspacings , ( #j - @long   ) / 2 )

   [ @xspacings , r ] [ @yspacings , d ]


// The first color should not contain
// the 100% capacity.
   n

// creating the board
   ( line  , 0 )
   [ @long ,
      i [ @xspacings , r ] [ @yspacings , d ]
      [ @line , d ]
      [ @long , prpr nn ]
      ( line , +1 )

      { @long % 2 = 0 , nn }
   ]

// Now we have to get to the buttom left
// of our board.
   i [ @xspacings , r ]
   [ @yspacings + @long - 1  , d ]
   { @long % 2 = 0 , nnn , n } 
   crc

   //////////////////////////////
   /// RUNNING THE ALGORITHEM ///
   //////////////////////////////

// Now we have to see what is the remaining
// of the @long to 3

   { @long%3=0,
   // W0 ///////////////////////////////////
   'Kary Knight\'s Move Optimizer : %3=0'


      // M1
      ! moves.M1 ( @long )

      // M4
      ! moves.M4 ( )

      // M5
      ! moves.M5 ( )     


   ,{@long%3=1,
   // W1 ///////////////////////////////////
   'Kary Knight\'s Move Optimizer : %3=1'

      // M1
      ! moves.M1 ( @long + 6 )
    //  [ 6 , rru ]

   ,
   // W2 ///////////////////////////////////
   'Kary Knight\'s Move Optimizer : %3=2'

      // M1
      ! moves.M1 ( @long )

      // M4
      ! moves.M4 ( )
      
      // M3
      ! moves.M3 ( )

   }}


// Making the border
   r  [ @long + 1     , prpdl ]
   u  [ @long * 2     , lp    ]
   ll [ @long + 1     , prpul ]
   l  [ @long * 2 + 4 , rp    ]

// done
